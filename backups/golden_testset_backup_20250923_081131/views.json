{
  "testset_overview": " SELECT t.id,\n    t.name,\n    format_version(t.version_major, t.version_minor, t.version_patch, t.version_label) AS version,\n    t.description,\n    t.domain,\n    t.source_type,\n    t.status,\n    t.validation_status,\n    t.quality_score,\n    t.created_at,\n    t.created_by,\n    t.approved_at,\n    t.approved_by,\n    t.phoenix_project_id,\n    t.phoenix_experiment_id,\n    COALESCE(stats.total_examples, 0) AS total_examples,\n    stats.avg_context_precision,\n    stats.avg_context_recall,\n    stats.avg_faithfulness,\n    stats.avg_answer_relevancy,\n    stats.retrieval_strategies\n   FROM (golden_testsets t\n     LEFT JOIN LATERAL ( SELECT (count(*))::integer AS total_examples,\n            round(avg(e.context_precision), 2) AS avg_context_precision,\n            round(avg(e.context_recall), 2) AS avg_context_recall,\n            round(avg(e.faithfulness), 2) AS avg_faithfulness,\n            round(avg(e.answer_relevancy), 2) AS avg_answer_relevancy,\n            array_agg(DISTINCT e.retrieval_strategy) AS retrieval_strategies\n           FROM golden_examples e\n          WHERE (e.testset_id = t.id)) stats ON (true));",
  "latest_testsets": " SELECT DISTINCT ON (name) id,\n    name,\n    format_version(version_major, version_minor, version_patch, version_label) AS version,\n    description,\n    domain,\n    source_type,\n    status,\n    validation_status,\n    quality_score,\n    created_at,\n    created_by,\n    approved_at,\n    approved_by\n   FROM golden_testsets t\n  ORDER BY name, version_major DESC, version_minor DESC, version_patch DESC, created_at DESC;"
}